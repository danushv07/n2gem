class CNet(nn.Module):
    def __init__(self):
        super(CNet, self).__init__()
        self.conv1 = nn.Conv2d(1, 4, kernel_size=7)
        #self.conv2 = nn.Conv2d(16, 32, kernel_size=4)
        #self.drop = nn.Dropout(0.5)
        self.fc1 = nn.Linear(4*11*11, 128)
        #self.fc3 = nn.Linear(512, 32)
        self.fc4 = nn.Linear(128, 10)
    
    def forward(self, x):
        x = F.max_pool2d(self.conv1(x), 2)
        x = F.relu(x)
        #x = self.drop(self.conv2(x))
        #x = self.conv2(x)
        #x = F.relu(F.max_pool2d(x, 2))
        #print(x.shape)
        x = x.view(-1, 4*11*11)
        x = F.relu(self.fc1(x))
        #x = self.drop(x)
        #x = F.relu(self.fc3(x))
        #x = self.drop(x)
        x = self.fc4(x)
        output = F.log_softmax(x, dim=1)
        return output
